/**************************************************************************/
/*  Copyright 2004 Gregor Zeitlinger, Bjoern Rabenstein                   */
/*                                                                        */
/*  This file is part of Lummerland.                                      */
/*                                                                        */
/*  Lummerland is free software; you can redistribute it and/or modify    */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/*  Lummerland is distributed in the hope that it will be useful,         */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU General Public License for more details.                          */
/*                                                                        */
/*  You should have received a copy of the GNU General Public License     */
/*  along with Lummerland; if not, write to the Free Software             */
/*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */
/**************************************************************************/

/* Generated by Together */

package de.berlios.lummerland.gui;

import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import de.berlios.lummerland.Game;
import de.berlios.lummerland.Lummerland;
import de.berlios.lummerland.gui.board.*;
import de.berlios.lummerland.gui.layout.LayoutFactory;

public class MainWindow {

	Display display; // The display

	Shell shell; // The shell

	Game game;

	DecisionAdapter decisionAdapter;

	public MainWindow(final Game game) {

		this.game = game;
		// Create the display

		display = new Display();

		// Create the window

		shell = new Shell(display);
		shell.setLayout(LayoutFactory.getVerticalLayout());

		PlayerWindowArea pwa = new PlayerWindowArea(shell, game);

		decisionAdapter = pwa.getDecisionAdapter();

		new HexMapAdapter(shell, game.getBoard());

		shell.addDisposeListener(new DisposeListener() {

			public void widgetDisposed(DisposeEvent arg0) {
				// todo implement widgetDisposed in MainWindow correctly
				Lummerland.getInstance().stopRequest();
			}
		});

	}

	public void show() {
		//shell.pack();
		shell.open();

		while (!shell.isDisposed()) {

			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}

		// Kill the window
		display.dispose();

	}

	/**
	 * Returns the display.
	 * @return Display
	 */
	public Display getDisplay() {
		return display;
	}

	/**
	 * Returns the shell.
	 * @return Shell
	 */
	public Shell getShell() {
		return shell;
	}
	public Point computeSize(int wHint, int hHint, boolean changed) {
		return new Point(1000, 900);
	}

	/**
	 * @return DecisionAdapter
	 */
	public DecisionAdapter getDecisionAdapter() {
		return decisionAdapter;
	}

}
